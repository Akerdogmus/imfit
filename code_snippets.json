{
    "code_snippets": [
        {
            "Snippets": {
                "Snippet_Name": "if",
                "Regex_Code": "if.*:",
                "Title": "Python if Statement Syntax",
                "Process": "if test expression:\n\tstatement(s)"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "elif",
                "Regex_Code": "elif.*:",
                "Title": "Python elif Statement Syntax",
                "Process": "elif test expression:\nBody of elif"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "else",
                "Regex_Code": "else.*:",
                "Title": "Python else Statement Syntax",
                "Process": "else:\nBody of else"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "for",
                "Regex_Code": "for.*:",
                "Title": "Syntax of for Loop",
                "Process": "for val in sequence:\nloop body"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "while",
                "Regex_Code": "while.*:",
                "Title": "Syntax of while Loop in Python",
                "Process": "while test_expression:\nBody of while"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "break",
                "Regex_Code": "break",
                "Title": "Syntax of break",
                "Process": "break"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "continue",
                "Regex_Code": "continue",
                "Title": "Syntax of Continue",
                "Process": "continue"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "pass",
                "Regex_Code": "pass",
                "Title": "Syntax of pass",
                "Process": "def function(args):\npass\nclass Example:\npass"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "return",
                "Regex_Code": "return",
                "Title": "Syntax of return",
                "Process": "def function(args):\npass\nclass Example:\npass"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "lambda function",
                "Regex_Code": "lambda",
                "Title": "Syntax of Lambda Function",
                "Process": "lambda arguments:\nexpression"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "__init__",
                "Regex_Code": "__init__",
                "Title": "Syntax of __init__",
                "Process": "__init__"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "__main__",
                "Regex_Code": "__main__",
                "Title": "Syntax of __main__",
                "Process": "if __name__ == '__main__':\nmain()"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "class",
                "Regex_Code": "class.*:",
                "Title": "Syntax of class",
                "Process": "class ClassName(object):\ndef __init__(self, arg):\nsuper(ClassName, self).__init__()\nself.arg = arg"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "Try/Except",
                "Regex_Code": "try.*:",
                "Title": "Syntax of Try/Except",
                "Process": "try:\npass\nexcept Exception as e:\nraise e "
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "Try/Except/Else",
                "Regex_Code": "try.*:",
                "Title": "Syntax of Try/Except/Else",
                "Process": "try:\npass\nexcept Exception as e:\nraise e\nelse:\npass"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "Try/Except/Finally",
                "Regex_Code": "try.*:",
                "Title": "Syntax of Try/Except/Finally",
                "Process": "try:\npass\nexcept Exception as e:\nraise e\nfinally:\npass"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "Try/Except/Else/Finally",
                "Regex_Code": "try.*:",
                "Title": "Syntax of __main__",
                "Process": "try:\npass\nexcept Exception as e:\nraise\nelse:\npass\nfinally:\npass"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "Shebang",
                "Regex_Code": "#!/usr/bin/env python",
                "Title": "Syntax of Shebang",
                "Process": "#!/usr/bin/env python"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "Function",
                "Regex_Code": "def.*:",
                "Title": "Syntax of Shebang",
                "Process": "#!/usr/bin/env python"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "ROS Initializing Node",
                "Regex_Code": "rospy.",
                "Title": "Syntax of Periodic Timer",
                "Process": "rospy.Timer(rospy.Duration(1.0/10),callback)"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "ROS Publishers",
                "Regex_Code": "rospy.Publisher",
                "Title": "Syntax of rospy Publisher",
                "Process": "rospy.Publisher('topic',Type,callback)"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "ROS Subscribers",
                "Regex_Code": "rospy.Subscriber",
                "Title": "Syntax of rospy Subscriber",
                "Process": "rospy.Subscriber('topic',Type,callback)"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "ROS Time Values",
                "Regex_Code": "rospy",
                "Title": "Syntax of Get a Global Parameter",
                "Process": "param=rospy.get_param('global_param_name')"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "ROS Services",
                "Regex_Code": "rospy",
                "Title": "Syntax of Get a Parameter From Our Parent Namespace",
                "Process": "param=rospy.get_param('param_name')"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "ROS Parameters",
                "Regex_Code": "rospy",
                "Title": "Syntax of Get a Parameter From Our Private Namespace",
                "Process": "param=rospy.get_param('~private_param_name')"
            }
        },
        {
            "Snippets": {
                "Snippet_Name": "ROS Logs",
                "Regex_Code": "rospy",
                "Title": "Syntax of Get a Parameter From Our Private Namespace",
                "Process": "param=rospy.get_param('~private_param_name')"
            }
        }         
    ]
}